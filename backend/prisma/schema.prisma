generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Admin Model
model Admin {
  id            String      @id @default(uuid()) @db.Char(36)
  adminName     String?     @map("AdminName") @db.VarChar(120)
  mobileNumber  String?     @map("MobileNumber") @db.VarChar(20)
  email         String?     @unique @db.VarChar(200)
  password      String?     @db.VarChar(120)
  adminRegDate  DateTime?   @default(now()) @map("AdminRegdate") @db.Timestamp(0)
  parkingLots   ParkingLot[]

  @@map("tbladmin")
}

model User {
  id           String     @id @default(uuid()) @db.Char(36)
  firstName    String?    @map("FirstName") @db.VarChar(250)
  lastName     String?    @map("LastName") @db.VarChar(250)
  mobileNumber String?    @map("MobileNumber") @db.VarChar(20)
  email        String?    @unique @db.VarChar(250)  // ðŸ‘ˆ Add @unique here
  password     String?    @db.VarChar(250)
  regDate      DateTime?  @default(now()) @map("RegDate") @db.Timestamp(0)
  bookings     Booking[]

  @@map("tblregusers")
}


// Category Model
model Category {
  id           String     @id @default(uuid()) @db.Char(36)
  vehicleCat   String?    @unique @map("VehicleCat") @db.VarChar(120)
  creationDate DateTime?  @default(now()) @map("CreationDate") @db.Timestamp(0)
  vehicles     Vehicle[]

  @@map("tblcategory")
}

// Parking Lot Model
model ParkingLot {
  id          String     @id @default(uuid()) @db.Char(36)
  adminId     String     @map("admin_id") @db.Char(36)
  location    String     @db.VarChar(250)
  totalSlot   Int        @map("totalSlot")
  bookedSlot  Int        @map("bookedSlot")
  price       Int        @db.Int
  admin       Admin      @relation(fields: [adminId], references: [id])
  bookings    Booking[]
  imgUrl      String    @map("imgUrl") @db.VarChar(250)

  @@map("parkinglot")
}

// Booking Model
model Booking {
  bookId       String      @id @default(uuid()) @map("book_id") @db.Char(36)
  userId       String      @map("user_id") @db.Char(36)
  parkingId    String      @map("parking_id") @db.VarChar(250)
  parkingLotId String      @map("parkinglot_id") @db.Char(36)
  paymentId    String      @map("payment_id") @db.VarChar(250)
  user         User        @relation(fields: [userId], references: [id])
  parkingLot   ParkingLot  @relation(fields: [parkingLotId], references: [id])

  @@map("booking")
}

// Vehicle Model
model Vehicle {
  id                  String     @id @default(uuid()) @db.Char(36)
  parkingNumber       String?    @map("ParkingNumber") @db.VarChar(120)
  vehicleCategory     String     @map("VehicleCategory") @db.VarChar(120)
  vehicleCompanyName  String?    @map("VehicleCompanyname") @db.VarChar(120)
  registrationNumber  String?    @map("RegistrationNumber") @db.VarChar(120)
  ownerName           String?    @map("OwnerName") @db.VarChar(120)
  ownerContactNumber  String?    @map("OwnerContactNumber") @db.VarChar(20)
  inTime              DateTime?  @default(now()) @map("InTime") @db.Timestamp(0)
  outTime             DateTime?  @map("OutTime") @db.Timestamp(0)
  parkingCharge       String     @map("ParkingCharge") @db.VarChar(120)
  remark              String     @map("Remark") @db.MediumText
  status              String     @db.VarChar(5)
  category            Category?  @relation(fields: [vehicleCategory], references: [vehicleCat])

  @@map("tblvehicle")
}
